import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import axios from "axios";
import "../css/OverlapHandler.css";

const API_URL = "http://127.0.0.1:8000";

// Trong OverLapHandler.js
const OverLapHandler = ({ soTo, soThua, phuongXa, onOverlapData }) => {
  const [overlapGroup, setOverlapGroup] = useState(null);
  const [currentIndex, setCurrentIndex] = useState(0);
  const [error, setError] = useState(null);
  const [isLoading, setIsLoading] = useState(false);

  const token = localStorage.getItem("token");
  const navigate = useNavigate();

  useEffect(() => {
    if (soTo && soThua && phuongXa) {
      checkOverlap(soTo, soThua, phuongXa);
    } else {
      setOverlapGroup(null);
      setError(null);
    }
  }, [soTo, soThua, phuongXa]);

  const checkOverlap = async (soTo, soThua, phuongXa) => {
    if (!token) {
      navigate("/login");
      return setError("Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ ti·∫øp t·ª•c.");
    }

    try {
      setIsLoading(true);
      setError(null);

      const response = await axios.get(
        `${API_URL}/api/land_plots/overlap-group`,
        {
          params: { so_to: soTo, so_thua: soThua, phuong_xa: phuongXa },
          headers: {
            Authorization: `Bearer ${token}`,
            "Content-Type": "application/json",
          },
          timeout: 10000,
        }
      );

      console.log("‚úÖ Overlap group response:", response.data);

      if (response.data.success) {
        setOverlapGroup(response.data);

        // Truy·ªÅn d·ªØ li·ªáu l√™n component cha
        if (onOverlapData) {
          onOverlapData(response.data);
        }

        setError(null);
      } else {
        setError(response.data.message || "Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu ch·ªìng l·∫•n.");
        setOverlapGroup(null);
      }
    } catch (error) {
      console.error("‚ùå Overlap group error:", error);

      if (error.response?.status === 401) {
        setError("Phi√™n ƒëƒÉng nh·∫≠p h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.");
        navigate("/login");
      } else if (error.response?.status === 404) {
        setError("API overlap-group kh√¥ng t·ªìn t·∫°i. Vui l√≤ng ki·ªÉm tra routes.");
      } else if (error.code === "ECONNABORTED") {
        setError("K·∫øt n·ªëi timeout. Vui l√≤ng th·ª≠ l·∫°i.");
      } else {
        setError(
          "L·ªói khi l·∫•y th√¥ng tin ch·ªìng l·∫•n: " +
            (error.message || "L·ªói kh√¥ng x√°c ƒë·ªãnh")
        );
      }
      setOverlapGroup(null);
    } finally {
      setIsLoading(false);
    }
  };

  const getColorByLandType = (landType) => {
    const colors = {
      CAN: "#ff6b6b", // Th√™m CAN
      ODT: "#ff8787",
      DGT: "#4dabf7",
      CLN: "#69db7c",
      LUC: "#51cf66",
      BHK: "#40c057",
      HCC: "#748ffc",
      SONG: "#339af0",
      NTS: "#20c997",
      ONT: "#ff6b6b",
    };
    return colors[landType] || "#868e96";
  };

  if (isLoading) {
    return (
      <div className="overlap-controls">
        <div className="overlap-loading">
          <div className="spinner"></div>
          ƒêang ki·ªÉm tra ch·ªìng l·∫•n...
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="overlap-controls">
        <div className="overlap-error">
          ‚ö†Ô∏è {error}
          <button
            onClick={() => checkOverlap(soTo, soThua, phuongXa)}
            className="retry-btn"
          >
            Th·ª≠ l·∫°i
          </button>
        </div>
      </div>
    );
  }

  if (!soTo || !soThua || !phuongXa) {
    return null;
  }

  if (!overlapGroup) {
    return null;
  }

  if (!overlapGroup.overlap_group?.has_overlap) {
    return (
      <div className="overlap-controls">
        <div className="overlap-info">
          ‚úÖ {overlapGroup.overlap_group?.message || "Kh√¥ng c√≥ ch·ªìng l·∫•n"}
          <div className="overlap-subtitle">
            S·ªë t·ªù: {soTo} - S·ªë th·ª≠a: {soThua} - Ph∆∞·ªùng/X√£: {phuongXa}
          </div>
          <div className="overlap-details">
            T·ªïng s·ªë th·ª≠a: {overlapGroup.overlap_group?.total_plots || 0}
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="overlap-controls">
      <div className="overlap-warning">
        ‚ö†Ô∏è{" "}
        {overlapGroup.overlap_group.message ||
          `C√≥ ${overlapGroup.overlap_group.total_plots} th·ª≠a ch·ªìng l·∫•n`}
        <div className="overlap-subtitle">
          S·ªë t·ªù: {soTo} - S·ªë th·ª≠a: {soThua} - Ph∆∞·ªùng/X√£: {phuongXa}
        </div>
      </div>

      <div className="plot-list">
        <div className="plot-list-title">Danh s√°ch ph√¢n lo·∫°i ƒë·∫•t:</div>
        {overlapGroup.features.map((feature, index) => {
          const properties = feature.properties || {};
          const subGeometries = feature.sub_geometries || [];

          return subGeometries.map((subGeom, subGeomIndex) => {
            // ‚úÖ LU√îN t√≠nh m√†u t·ª´ ky_hieu_mdsd
            const landTypeColor = getColorByLandType(subGeom.ky_hieu_mdsd);

            console.log(`üìä ${subGeom.ky_hieu_mdsd}: ${landTypeColor}`);

            return (
              <div
                key={`${properties.id || index}-${subGeomIndex}`}
                className="plot-item"
                style={{
                  borderLeft: `4px solid ${landTypeColor}`,
                }}
              >
                <div className="plot-type">
                  <span
                    className="color-badge"
                    style={{
                      backgroundColor: landTypeColor,
                    }}
                  ></span>
                  <strong>{subGeom.ky_hieu_mdsd || "Ch∆∞a x√°c ƒë·ªãnh"}</strong>
                </div>
                <div className="plot-details">
                  <span className="plot-area">
                    {subGeom.dien_tich ? `${subGeom.dien_tich}m¬≤` : "0m¬≤"}
                  </span>
                  {properties.owner && (
                    <span className="plot-owner">{properties.owner}</span>
                  )}
                </div>

                {/* ‚úÖ Hi·ªÉn th·ªã m√†u ƒëang d√πng ƒë·ªÉ debug */}
                <div
                  className="debug-info"
                  style={{ fontSize: "10px", color: "#666", marginTop: "4px" }}
                >
                  M√†u: {landTypeColor}
                </div>

                {properties.area_percentages &&
                  properties.area_percentages[subGeomIndex] && (
                    <div className="area-percentage">
                      T·ª∑ l·ªá: {properties.area_percentages[subGeomIndex]}%
                    </div>
                  )}

                <div className="plot-meta">
                  <small>Th·ª≠a #{properties.display_order || index + 1}</small>
                </div>
              </div>
            );
          });
        })}
      </div>
      {overlapGroup.features.length > 1 && (
        <div className="overlap-actions">
          <button
            className="action-btn"
            onClick={() => {
              const nextIndex =
                (currentIndex + 1) % overlapGroup.features.length;
              setCurrentIndex(nextIndex);
            }}
          >
            üîÑ Chuy·ªÉn th·ª≠a ({currentIndex + 1}/{overlapGroup.features.length})
          </button>
        </div>
      )}
    </div>
  );
};

export default OverLapHandler;
